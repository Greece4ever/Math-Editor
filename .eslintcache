[{"C:\\Users\\test\\Desktop\\math\\my-app\\src\\index.js":"1","C:\\Users\\test\\Desktop\\math\\my-app\\src\\App.js":"2","C:\\Users\\test\\Desktop\\math\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\test\\Desktop\\math\\my-app\\src\\components\\parsing.js":"4"},{"size":500,"mtime":1612045558000,"results":"5","hashOfConfig":"6"},{"size":9591,"mtime":1627262908169,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1612045558000,"results":"8","hashOfConfig":"6"},{"size":3617,"mtime":1612191869000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1ph90af",{"filePath":"13","messages":"14","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"C:\\Users\\test\\Desktop\\math\\my-app\\src\\index.js",[],["20","21"],"C:\\Users\\test\\Desktop\\math\\my-app\\src\\App.js",["22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38"],"C:\\Users\\test\\Desktop\\math\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\test\\Desktop\\math\\my-app\\src\\components\\parsing.js",["39","40","41","42","43"],"export function splitAtRange(str, x, y) {\n  return str.substring(0, x) + str.substring(y, str.length);\n}\n\nexport function insert_at(str, insrt, pos) {\n  return str.slice(0, pos) + insrt + str.slice(pos, str.length);\n}\n\nlet nums = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\n/* Return starting and ending index of outter-most parentheses */\n\n// Heading to the right ---->\nfunction mathRightPar(str, start_index) {\n  let i = start_index; // of parentheses \n    let j = 0;\n  let states = [];\n    for (j=i; j < str.length; j++) {\n        if (str[j] === \"(\") {\n            states.push(1)\n      // Parenteses Found at j creating [ states.length, j];\n    }\n        else if (str[j] == \")\") {\n            // Parenteses poped at j matching [states.length];\n            states.pop();\n            if (!states.length)\n                break;\n        }\n    }\n    return [i, j + 1];\n}\n\n// Heading to the left <----\nfunction matchLeftPar(str, start_index) {\n  let i = start_index; // of parentheses \n  let j = 0;\n  let states = [];\n    for (j=i; j > 0; j--) {\n        if (str[j] === \")\") {\n            states.push(1)\n      // Parenteses Found at j creating [ states.length, j];\n    }\n        else if (str[j] == \"(\") {\n            // Parenteses poped at j matching [states.length];\n            states.pop();\n            if (!states.length)\n                break;\n        }\n    }\n    return [j, i + 1];\n}\n\n// find repeating number character in string at index\nfunction num(str, index, inc=1, comp) {\n  let char;\n\tlet i;\n  for (i=index; comp(i); i += inc) \n  {\n    char = str[i];\n    if (!nums.includes(char)) \n      break;\n  }\n  \n  if (inc === -1) // Reverse if backwards\n\t\treturn [i + 1, index + 1];  \n  return [index, i];\n}\n\n/* \n\t Find the number | prentheses (heading to left or right when inc=-1 or inc=1) \n\t after div (/) symbol and return starting and ending index \n   as an array of [start, end]\n*/\nfunction handle_num(str, index, inc=1) {\n  let comp, j;\n  if (inc === 1) // Forward\n    comp = x => x < str.length;\n  else\n    comp = x => x >= 0; // TODO x > 0 should be x >= (BEGGINING OF \"(\" BRACKETS)\n\n  for (j=(index + inc); comp(j); j += inc)  { // Keep searching until whitespace is cleared\n    if (str[j] !== \" \") {\n      // Parentheses\n      if (str[j] === \"(\") { \n          if (inc === 1) // \"(\" can only be found when searching <---\n        \t\treturn mathRightPar(str, j);            \n      }\n      else if (str[j] == \")\") {\n        if (inc === -1) { // \")\" can only be found when searching <---\n          return matchLeftPar(str, j);            \n        }\n      }\n\t\t\t\n      // Single character | number\n      if (!nums.includes(str[j]))         \n        return [j, j +1]\n      else\n        return num(str, j, inc, comp);\n    }\n  }\n}\n\n// Get rid of outter parentheses\nfunction hpar(str) {\n\tif (str[0] == \"(\") {\n\t\treturn str.trim().substring(1, str.length - 1);\n  }\n  return str.trim();\n}\n\n// Convert only one\nfunction replace_frac(str, index) {\n  let right = handle_num(str, index, 1);\n  let left  = handle_num(str, index, -1);\n  \n  \tlet numerator \t= hpar (str.substring(left[0], left[1]))\n  \tlet denominator = hpar (str.substring(right[0], right[1]));\n  let to_latex = `\\\\frac{${numerator}}{${denominator}}`;\n     \n  let split_str = splitAtRange(str, left[0], right[1]); // Rest of the string\n  return insert_at(split_str, to_latex, left[0])\n}\n\n\n// Convert all fractions (ie 1/5) to latex (\\frac{1}{5})\nexport default function convertFraction(str) {\n\tlet cstr = str;\n\tlet index = cstr.indexOf(\"/\");\n  while (index != -1) {\n\t\tcstr = replace_frac(cstr, index);\n    index = cstr.indexOf(\"/\");\n  }\n  return cstr;\n}\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":2,"column":8,"nodeType":"50","messageId":"51","endLine":2,"endColumn":14},{"ruleId":"52","severity":1,"message":"53","line":61,"column":28,"nodeType":"54","messageId":"55","endLine":61,"endColumn":30},{"ruleId":"52","severity":1,"message":"53","line":79,"column":12,"nodeType":"54","messageId":"55","endLine":79,"endColumn":14},{"ruleId":"52","severity":1,"message":"56","line":90,"column":16,"nodeType":"54","messageId":"55","endLine":90,"endColumn":18},{"ruleId":"57","severity":1,"message":"58","line":101,"column":4,"nodeType":"59","messageId":"55","endLine":101,"endColumn":34},{"ruleId":"52","severity":1,"message":"53","line":109,"column":17,"nodeType":"54","messageId":"55","endLine":109,"endColumn":19},{"ruleId":"60","severity":1,"message":"61","line":113,"column":19,"nodeType":"62","messageId":"63","endLine":115,"endColumn":6},{"ruleId":"52","severity":1,"message":"53","line":135,"column":17,"nodeType":"54","messageId":"55","endLine":135,"endColumn":19},{"ruleId":"60","severity":1,"message":"61","line":139,"column":19,"nodeType":"62","messageId":"63","endLine":141,"endColumn":6},{"ruleId":"48","severity":1,"message":"64","line":198,"column":10,"nodeType":"50","messageId":"51","endLine":198,"endColumn":16},{"ruleId":"48","severity":1,"message":"65","line":198,"column":18,"nodeType":"50","messageId":"51","endLine":198,"endColumn":27},{"ruleId":"48","severity":1,"message":"66","line":200,"column":9,"nodeType":"50","messageId":"51","endLine":200,"endColumn":16},{"ruleId":"48","severity":1,"message":"67","line":204,"column":10,"nodeType":"50","messageId":"51","endLine":204,"endColumn":19},{"ruleId":"48","severity":1,"message":"68","line":204,"column":21,"nodeType":"50","messageId":"51","endLine":204,"endColumn":33},{"ruleId":"69","severity":1,"message":"70","line":223,"column":6,"nodeType":"71","endLine":223,"endColumn":8,"suggestions":"72"},{"ruleId":"48","severity":1,"message":"73","line":363,"column":15,"nodeType":"50","messageId":"51","endLine":363,"endColumn":20},{"ruleId":"74","severity":1,"message":"75","line":364,"column":11,"nodeType":"76","messageId":"77","endLine":372,"endColumn":12},{"ruleId":"52","severity":1,"message":"56","line":23,"column":25,"nodeType":"54","messageId":"55","endLine":23,"endColumn":27},{"ruleId":"52","severity":1,"message":"56","line":43,"column":25,"nodeType":"54","messageId":"55","endLine":43,"endColumn":27},{"ruleId":"52","severity":1,"message":"56","line":88,"column":23,"nodeType":"54","messageId":"55","endLine":88,"endColumn":25},{"ruleId":"52","severity":1,"message":"56","line":105,"column":13,"nodeType":"54","messageId":"55","endLine":105,"endColumn":15},{"ruleId":"52","severity":1,"message":"53","line":129,"column":16,"nodeType":"54","messageId":"55","endLine":129,"endColumn":18},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'Parser' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-control-regex","Unexpected control character(s) in regular expression: \\x00.","Literal","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'sub_str', 'sub_str'.","ArrowFunctionExpression","unsafeRefs","'buffer' is assigned a value but never used.","'setBuffer' is assigned a value but never used.","'classes' is assigned a value but never used.","'animation' is assigned a value but never used.","'setAnimation' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'line_repl' and 'repl'. Either include them or remove the dependency array.","ArrayExpression",["80"],"'value' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [line_repl, repl]",{"range":"83","text":"84"},[4979,4981],"[line_repl, repl]"]