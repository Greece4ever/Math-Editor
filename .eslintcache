[{"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\index.js":"1","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\App.js":"2","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\reportWebVitals.js":"3","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\parsing.js":"4","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\hooks.js":"5","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\replace.js":"6","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\renderMain.js":"7","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\dialog.js":"8","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\table.js":"9"},{"size":517,"mtime":1628204754299,"results":"10","hashOfConfig":"11"},{"size":7504,"mtime":1628360369523,"results":"12","hashOfConfig":"11"},{"size":375,"mtime":1628204754299,"results":"13","hashOfConfig":"11"},{"size":3751,"mtime":1628204754290,"results":"14","hashOfConfig":"11"},{"size":826,"mtime":1628271109326,"results":"15","hashOfConfig":"11"},{"size":4737,"mtime":1628358128086,"results":"16","hashOfConfig":"11"},{"size":2623,"mtime":1628295303967,"results":"17","hashOfConfig":"11"},{"size":4539,"mtime":1628362095283,"results":"18","hashOfConfig":"11"},{"size":1842,"mtime":1628361059550,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"mjgbe3",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\index.js",[],["42","43"],"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\App.js",["44"],"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\reportWebVitals.js",[],"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\parsing.js",["45","46","47","48","49"],"export function splitAtRange(str, x, y) {\r\n  return str.substring(0, x) + str.substring(y, str.length);\r\n}\r\n\r\nexport function insert_at(str, insrt, pos) {\r\n  return str.slice(0, pos) + insrt + str.slice(pos, str.length);\r\n}\r\n\r\nlet nums = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\r\n\r\n/* Return starting and ending index of outter-most parentheses */\r\n\r\n// Heading to the right ---->\r\nfunction mathRightPar(str, start_index) {\r\n  let i = start_index; // of parentheses \r\n    let j = 0;\r\n  let states = [];\r\n    for (j=i; j < str.length; j++) {\r\n        if (str[j] === \"(\") {\r\n            states.push(1)\r\n      // Parenteses Found at j creating [ states.length, j];\r\n    }\r\n        else if (str[j] == \")\") {\r\n            // Parenteses poped at j matching [states.length];\r\n            states.pop();\r\n            if (!states.length)\r\n                break;\r\n        }\r\n    }\r\n    return [i, j + 1];\r\n}\r\n\r\n// Heading to the left <----\r\nfunction matchLeftPar(str, start_index) {\r\n  let i = start_index; // of parentheses \r\n  let j = 0;\r\n  let states = [];\r\n    for (j=i; j > 0; j--) {\r\n        if (str[j] === \")\") {\r\n            states.push(1)\r\n      // Parenteses Found at j creating [ states.length, j];\r\n    }\r\n        else if (str[j] == \"(\") {\r\n            // Parenteses poped at j matching [states.length];\r\n            states.pop();\r\n            if (!states.length)\r\n                break;\r\n        }\r\n    }\r\n    return [j, i + 1];\r\n}\r\n\r\n// find repeating number character in string at index\r\nfunction num(str, index, inc=1, comp) {\r\n  let char;\r\n\tlet i;\r\n  for (i=index; comp(i); i += inc) \r\n  {\r\n    char = str[i];\r\n    if (!nums.includes(char)) \r\n      break;\r\n  }\r\n  \r\n  if (inc === -1) // Reverse if backwards\r\n\t\treturn [i + 1, index + 1];  \r\n  return [index, i];\r\n}\r\n\r\n/* \r\n\t Find the number | prentheses (heading to left or right when inc=-1 or inc=1) \r\n\t after div (/) symbol and return starting and ending index \r\n   as an array of [start, end]\r\n*/\r\nfunction handle_num(str, index, inc=1) {\r\n  let comp, j;\r\n  if (inc === 1) // Forward\r\n    comp = x => x < str.length;\r\n  else\r\n    comp = x => x >= 0; // TODO x > 0 should be x >= (BEGGINING OF \"(\" BRACKETS)\r\n\r\n  for (j=(index + inc); comp(j); j += inc)  { // Keep searching until whitespace is cleared\r\n    if (str[j] !== \" \") {\r\n      // Parentheses\r\n      if (str[j] === \"(\") { \r\n          if (inc === 1) // \"(\" can only be found when searching <---\r\n        \t\treturn mathRightPar(str, j);            \r\n      }\r\n      else if (str[j] == \")\") {\r\n        if (inc === -1) { // \")\" can only be found when searching <---\r\n          return matchLeftPar(str, j);            \r\n        }\r\n      }\r\n\t\t\t\r\n      // Single character | number\r\n      if (!nums.includes(str[j]))         \r\n        return [j, j +1]\r\n      else\r\n        return num(str, j, inc, comp);\r\n    }\r\n  }\r\n}\r\n\r\n// Get rid of outter parentheses\r\nfunction hpar(str) {\r\n\tif (str[0] == \"(\") {\r\n\t\treturn str.trim().substring(1, str.length - 1);\r\n  }\r\n  return str.trim();\r\n}\r\n\r\n// Convert only one\r\nfunction replace_frac(str, index) {\r\n  let right = handle_num(str, index, 1);\r\n  let left  = handle_num(str, index, -1);\r\n  \r\n  \tlet numerator \t= hpar (str.substring(left[0], left[1]))\r\n  \tlet denominator = hpar (str.substring(right[0], right[1]));\r\n  let to_latex = `\\\\frac{${numerator}}{${denominator}}`;\r\n     \r\n  let split_str = splitAtRange(str, left[0], right[1]); // Rest of the string\r\n  return insert_at(split_str, to_latex, left[0])\r\n}\r\n\r\n\r\n// Convert all fractions (ie 1/5) to latex (\\frac{1}{5})\r\nexport default function convertFraction(str) {\r\n\tlet cstr = str;\r\n\tlet index = cstr.indexOf(\"/\");\r\n  while (index != -1) {\r\n\t\tcstr = replace_frac(cstr, index);\r\n    index = cstr.indexOf(\"/\");\r\n  }\r\n  return cstr;\r\n}\r\n","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\hooks.js",["50","51"],"import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nexport default function useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n  \r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    // Set up the interval.\r\n    useEffect(() => {\r\n      let id = setInterval(() => {\r\n        savedCallback.current();\r\n      }, delay);\r\n      return () => clearInterval(id);\r\n    }, [delay]);\r\n}\r\n  \r\n\r\nexport function useEffectAllDepsChange(fn, deps) {\r\n  const [changeTarget, setChangeTarget] = useState(deps);\r\n\r\n  useEffect(() => {\r\n    setChangeTarget(prev => {\r\n      if (prev.every((dep, i) => dep !== deps[i])) {\r\n        return deps;\r\n      }\r\n\r\n      return prev;\r\n    });\r\n  }, [deps]);\r\n\r\n  useEffect(fn, changeTarget);\r\n}\r\n","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\replace.js",["52","53","54","55","56","57","58","59"],"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\renderMain.js",["60","61","62","63","64"],"import katex from \"katex\";\r\nimport convertFraction, { insert_at, splitAtRange } from \"./parsing\";\r\nimport {Latex, line_repl, repl, m, fnd, removeAtRange, __line_replace, findLink, findInside} from './replace'\r\n\r\nfunction replaceMath(str, ptrn=\"$$\") {\r\n    let ind = findInside(str, ptrn); // Find where it starts and ends \r\n    let sub_str;\r\n    while (ind[0] != -1) {\r\n      str= ind[2]; // End\r\n      sub_str = removeAtRange(str, ind[0], ind[1]); // math string\r\n      str = splitAtRange(str, ind[0], ind[1]); // rest of the string\r\n      Latex.forEach(symbol => {\r\n        sub_str = sub_str.replaceAll(symbol[0], symbol[1])\r\n      });\r\n      \r\n      try {\r\n        sub_str = convertFraction(sub_str);\r\n      } catch(e) {};\r\n  \r\n      let html = katex.renderToString(sub_str, {throwOnError: false});\r\n  \r\n      // html = `<div class=\"center\">${html}</div>`\r\n  \r\n      str = insert_at(str, html, ind[0]);\r\n      ind = findInside(str, ptrn);\r\n    }\r\n    return str;\r\n}\r\n\r\n\r\n// convert math string e.g `x/5` to latex `\\frac{x}{5}`\r\nexport function convertLatex(sub_str)\r\n{\r\n  Latex.forEach(symbol => {\r\n    sub_str = sub_str.replaceAll(symbol[0], symbol[1] + \" \")\r\n  });\r\n  \r\n  try {\r\n    sub_str = convertFraction(sub_str);\r\n  } catch(e) {};\r\n\r\n  return katex.renderToString(sub_str, {throwOnError: false});\r\n};\r\n\r\nexport const convertLinks = (string) => {\r\n  let str1 = \"\"\r\n  let _ = findLink(string);\r\n\r\n\r\n  while ( typeof(_) !== \"string\" )\r\n  {\r\n      str1 += _[0];\r\n      _ = findLink(_[1]);\r\n  }\r\n\r\n  return str1 + _;\r\n}\r\n\r\n  \r\nexport function renderMarkdown(val)\r\n  {\r\n\r\n    val = val.replaceAll(\"    \", \"&nbsp;\");\r\n\r\n      // ([A-Za-z]|[^\\x00-\\x7F])(\\d)\r\n    line_repl.forEach(i => {\r\n      // val = line_replace( /*\"\\n\" +*/ val, \"\\n\" +i[0], \"\\n\", i[1])\r\n      val = __line_replace(val, i[0], i[1], i[2]);\r\n\r\n      // val = val.replace(\"\\n\", \"\");      \r\n    })\r\n  \r\n    repl.forEach(i => {\r\n      val = fnd(val, i[0], i[1]);\r\n    })\r\n\r\n\r\n    // val = replaceMath(val, \"$$\");\r\n\r\n    val = convertLinks(val);\r\n  \r\n    return val;\r\n  }\r\n\r\n\r\nexport function findAllMath(str, ptrn=\"$$\", className=\"math\") {\r\n  let ind = findInside(str, ptrn); // Find where it starts and ends \r\n  let sub_str;\r\n\r\n  let math_strings = [];\r\n\r\n  while (ind[0] != -1) {\r\n    str= ind[2]; // End\r\n    sub_str = removeAtRange(str, ind[0], ind[1]); // math string\r\n    str = splitAtRange(str, ind[0], ind[1]); // rest of the string\r\n\r\n    math_strings.push(sub_str);\r\n\r\n    let html = `<span class=\"${className}\"></span>`\r\n\r\n\r\n    str = insert_at(str, html, ind[0]);\r\n    ind = findInside(str, ptrn);\r\n  }\r\n\r\n  return [str, math_strings];\r\n}\r\n\r\n","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\dialog.js",["65","66","67","68","69"],"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\table.js",["70"],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":97,"column":67,"nodeType":"77","messageId":"78","endLine":97,"endColumn":69},{"ruleId":"75","severity":1,"message":"76","line":23,"column":25,"nodeType":"77","messageId":"78","endLine":23,"endColumn":27},{"ruleId":"75","severity":1,"message":"76","line":43,"column":25,"nodeType":"77","messageId":"78","endLine":43,"endColumn":27},{"ruleId":"75","severity":1,"message":"76","line":88,"column":23,"nodeType":"77","messageId":"78","endLine":88,"endColumn":25},{"ruleId":"75","severity":1,"message":"76","line":105,"column":13,"nodeType":"77","messageId":"78","endLine":105,"endColumn":15},{"ruleId":"75","severity":1,"message":"79","line":129,"column":16,"nodeType":"77","messageId":"78","endLine":129,"endColumn":18},{"ruleId":"80","severity":1,"message":"81","line":1,"column":8,"nodeType":"82","messageId":"83","endLine":1,"endColumn":13},{"ruleId":"84","severity":1,"message":"85","line":34,"column":3,"nodeType":"82","endLine":34,"endColumn":12,"suggestions":"86"},{"ruleId":"80","severity":1,"message":"87","line":1,"column":10,"nodeType":"82","messageId":"83","endLine":1,"endColumn":19},{"ruleId":"88","severity":1,"message":"89","line":11,"column":6,"nodeType":"90","messageId":"78","endLine":11,"endColumn":36},{"ruleId":"75","severity":1,"message":"79","line":48,"column":30,"nodeType":"77","messageId":"78","endLine":48,"endColumn":32},{"ruleId":"75","severity":1,"message":"76","line":65,"column":11,"nodeType":"77","messageId":"78","endLine":65,"endColumn":13},{"ruleId":"75","severity":1,"message":"76","line":73,"column":19,"nodeType":"77","messageId":"78","endLine":73,"endColumn":21},{"ruleId":"75","severity":1,"message":"76","line":95,"column":11,"nodeType":"77","messageId":"78","endLine":95,"endColumn":13},{"ruleId":"75","severity":1,"message":"76","line":147,"column":17,"nodeType":"77","messageId":"78","endLine":147,"endColumn":19},{"ruleId":"75","severity":1,"message":"76","line":179,"column":18,"nodeType":"77","messageId":"78","endLine":179,"endColumn":20},{"ruleId":"80","severity":1,"message":"91","line":3,"column":33,"nodeType":"82","messageId":"83","endLine":3,"endColumn":34},{"ruleId":"80","severity":1,"message":"92","line":5,"column":10,"nodeType":"82","messageId":"83","endLine":5,"endColumn":21},{"ruleId":"75","severity":1,"message":"79","line":8,"column":19,"nodeType":"77","messageId":"78","endLine":8,"endColumn":21},{"ruleId":"93","severity":1,"message":"94","line":12,"column":21,"nodeType":"95","messageId":"96","endLine":14,"endColumn":8},{"ruleId":"75","severity":1,"message":"79","line":92,"column":17,"nodeType":"77","messageId":"78","endLine":92,"endColumn":19},{"ruleId":"80","severity":1,"message":"97","line":1,"column":18,"nodeType":"82","messageId":"83","endLine":1,"endColumn":32},{"ruleId":"80","severity":1,"message":"98","line":90,"column":24,"nodeType":"82","messageId":"83","endLine":90,"endColumn":37},{"ruleId":"80","severity":1,"message":"99","line":91,"column":23,"nodeType":"82","messageId":"83","endLine":91,"endColumn":35},{"ruleId":"100","severity":1,"message":"101","line":105,"column":29,"nodeType":"102","endLine":108,"endColumn":29},{"ruleId":"100","severity":1,"message":"101","line":110,"column":29,"nodeType":"102","endLine":115,"endColumn":24},{"ruleId":"80","severity":1,"message":"103","line":9,"column":8,"nodeType":"82","messageId":"83","endLine":9,"endColumn":13},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fn'. Either include it or remove the dependency array.",["106"],"'insert_at' is defined but never used.","no-control-regex","Unexpected control character(s) in regular expression: \\x00.","Literal","'m' is defined but never used.","'replaceMath' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'sub_str', 'sub_str'.","ArrowFunctionExpression","unsafeRefs","'LinearProgress' is defined but never used.","'setLatexTable' is assigned a value but never used.","'setHtmlTable' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Paper' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},"Update the dependencies array to be: [fn]",{"range":"109","text":"110"},[807,819],"[fn]"]