[{"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\index.js":"1","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\App.js":"2","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\reportWebVitals.js":"3","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\parsing.js":"4","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\hooks.js":"5","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\replace.js":"6","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\renderMain.js":"7","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\dialog.js":"8","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\table.js":"9","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\save.js":"10","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\icons.js":"11","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\dialog2.js":"12"},{"size":517,"mtime":1628204754299,"results":"13","hashOfConfig":"14"},{"size":7671,"mtime":1628384436787,"results":"15","hashOfConfig":"14"},{"size":375,"mtime":1628204754299,"results":"16","hashOfConfig":"14"},{"size":3751,"mtime":1628204754290,"results":"17","hashOfConfig":"14"},{"size":826,"mtime":1628271109326,"results":"18","hashOfConfig":"14"},{"size":4868,"mtime":1628375916734,"results":"19","hashOfConfig":"14"},{"size":1880,"mtime":1628374515362,"results":"20","hashOfConfig":"14"},{"size":4542,"mtime":1628369426569,"results":"21","hashOfConfig":"14"},{"size":1842,"mtime":1628361059550,"results":"22","hashOfConfig":"14"},{"size":1478,"mtime":1628384489196,"results":"23","hashOfConfig":"14"},{"size":2821,"mtime":1628384584172,"results":"24","hashOfConfig":"14"},{"size":3012,"mtime":1628384190812,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"mjgbe3",{"filePath":"29","messages":"30","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\index.js",[],["57","58"],"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\App.js",["59","60","61","62","63","64","65","66","67","68","69","70","71","72","73"],"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\reportWebVitals.js",[],"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\parsing.js",["74","75","76","77","78"],"export function splitAtRange(str, x, y) {\r\n  return str.substring(0, x) + str.substring(y, str.length);\r\n}\r\n\r\nexport function insert_at(str, insrt, pos) {\r\n  return str.slice(0, pos) + insrt + str.slice(pos, str.length);\r\n}\r\n\r\nlet nums = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\r\n\r\n/* Return starting and ending index of outter-most parentheses */\r\n\r\n// Heading to the right ---->\r\nfunction mathRightPar(str, start_index) {\r\n  let i = start_index; // of parentheses \r\n    let j = 0;\r\n  let states = [];\r\n    for (j=i; j < str.length; j++) {\r\n        if (str[j] === \"(\") {\r\n            states.push(1)\r\n      // Parenteses Found at j creating [ states.length, j];\r\n    }\r\n        else if (str[j] == \")\") {\r\n            // Parenteses poped at j matching [states.length];\r\n            states.pop();\r\n            if (!states.length)\r\n                break;\r\n        }\r\n    }\r\n    return [i, j + 1];\r\n}\r\n\r\n// Heading to the left <----\r\nfunction matchLeftPar(str, start_index) {\r\n  let i = start_index; // of parentheses \r\n  let j = 0;\r\n  let states = [];\r\n    for (j=i; j > 0; j--) {\r\n        if (str[j] === \")\") {\r\n            states.push(1)\r\n      // Parenteses Found at j creating [ states.length, j];\r\n    }\r\n        else if (str[j] == \"(\") {\r\n            // Parenteses poped at j matching [states.length];\r\n            states.pop();\r\n            if (!states.length)\r\n                break;\r\n        }\r\n    }\r\n    return [j, i + 1];\r\n}\r\n\r\n// find repeating number character in string at index\r\nfunction num(str, index, inc=1, comp) {\r\n  let char;\r\n\tlet i;\r\n  for (i=index; comp(i); i += inc) \r\n  {\r\n    char = str[i];\r\n    if (!nums.includes(char)) \r\n      break;\r\n  }\r\n  \r\n  if (inc === -1) // Reverse if backwards\r\n\t\treturn [i + 1, index + 1];  \r\n  return [index, i];\r\n}\r\n\r\n/* \r\n\t Find the number | prentheses (heading to left or right when inc=-1 or inc=1) \r\n\t after div (/) symbol and return starting and ending index \r\n   as an array of [start, end]\r\n*/\r\nfunction handle_num(str, index, inc=1) {\r\n  let comp, j;\r\n  if (inc === 1) // Forward\r\n    comp = x => x < str.length;\r\n  else\r\n    comp = x => x >= 0; // TODO x > 0 should be x >= (BEGGINING OF \"(\" BRACKETS)\r\n\r\n  for (j=(index + inc); comp(j); j += inc)  { // Keep searching until whitespace is cleared\r\n    if (str[j] !== \" \") {\r\n      // Parentheses\r\n      if (str[j] === \"(\") { \r\n          if (inc === 1) // \"(\" can only be found when searching <---\r\n        \t\treturn mathRightPar(str, j);            \r\n      }\r\n      else if (str[j] == \")\") {\r\n        if (inc === -1) { // \")\" can only be found when searching <---\r\n          return matchLeftPar(str, j);            \r\n        }\r\n      }\r\n\t\t\t\r\n      // Single character | number\r\n      if (!nums.includes(str[j]))         \r\n        return [j, j +1]\r\n      else\r\n        return num(str, j, inc, comp);\r\n    }\r\n  }\r\n}\r\n\r\n// Get rid of outter parentheses\r\nfunction hpar(str) {\r\n\tif (str[0] == \"(\") {\r\n\t\treturn str.trim().substring(1, str.length - 1);\r\n  }\r\n  return str.trim();\r\n}\r\n\r\n// Convert only one\r\nfunction replace_frac(str, index) {\r\n  let right = handle_num(str, index, 1);\r\n  let left  = handle_num(str, index, -1);\r\n  \r\n  \tlet numerator \t= hpar (str.substring(left[0], left[1]))\r\n  \tlet denominator = hpar (str.substring(right[0], right[1]));\r\n  let to_latex = `\\\\frac{${numerator}}{${denominator}}`;\r\n     \r\n  let split_str = splitAtRange(str, left[0], right[1]); // Rest of the string\r\n  return insert_at(split_str, to_latex, left[0])\r\n}\r\n\r\n\r\n// Convert all fractions (ie 1/5) to latex (\\frac{1}{5})\r\nexport default function convertFraction(str) {\r\n\tlet cstr = str;\r\n\tlet index = cstr.indexOf(\"/\");\r\n  while (index != -1) {\r\n\t\tcstr = replace_frac(cstr, index);\r\n    index = cstr.indexOf(\"/\");\r\n  }\r\n  return cstr;\r\n}\r\n","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\hooks.js",["79","80"],"import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nexport default function useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n  \r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    // Set up the interval.\r\n    useEffect(() => {\r\n      let id = setInterval(() => {\r\n        savedCallback.current();\r\n      }, delay);\r\n      return () => clearInterval(id);\r\n    }, [delay]);\r\n}\r\n  \r\n\r\nexport function useEffectAllDepsChange(fn, deps) {\r\n  const [changeTarget, setChangeTarget] = useState(deps);\r\n\r\n  useEffect(() => {\r\n    setChangeTarget(prev => {\r\n      if (prev.every((dep, i) => dep !== deps[i])) {\r\n        return deps;\r\n      }\r\n\r\n      return prev;\r\n    });\r\n  }, [deps]);\r\n\r\n  useEffect(fn, changeTarget);\r\n}\r\n","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\replace.js",["81","82","83","84","85","86","87","88"],"import { insert_at } from \"./parsing\";\r\n\r\nexport let Latex = [\r\n    ['>=', \"\\\\ge\",       \"Greater than/equal\"],\r\n    [\"<=>\", \" \\\\iff \" ,  \"If and only if\"],\r\n    ['<=', \"\\\\le\",       \"Less than/equal\"],\r\n    ['=>', \"\\\\implies\",  \"Implies\"],\r\n    [\"+-\", \"\\\\pm\",       \"Plus/Minus\"],\r\n    [\"sqrt\", \"\\\\sqrt\",   \"Square root, replace x with anything\"],\r\n    [\"!=\", \"\\\\neq\",      \"Not equal\"],\r\n    [/([A-Za-z]|[^\\x00-\\x7F])(\\d)/g, \"$1_$2\", \"Subscript, Replace x with any letter and 0 with any number\"],\r\n    [\"<-\", \"\\\\leftarrow\", \"Leftarrow\"],\r\n    [\"->\", \"\\\\rightarrow\",\"Rightarrow\"],\r\n    [\"*\", \"\\\\cdot\",        \"Centered dot\"]\r\n  ]\r\n\r\n\r\n  \r\nexport const line_repl = [\r\n    [\"#\", \"<h2>\", \"</h2><hr></hr>\", \"Large text with underline\"],\r\n    ['-', \"<ul>\", \"</ul>\", \"Text with left margin\"],\r\n    ['>', \"<blockquote><ul>\", \"</ul></blockquote>\", \"bloquote\"],\r\n]\r\n\r\nexport const repl = [\r\n    [\"**\", \"b\", \"Bold\"],\r\n    [\"*_\", \"i\", \"Italic\"],\r\n    // [\"\\n\\n\", \"p\", \"\"],\r\n    [\"```\", \"pre\", \"Code\"],\r\n    [\"@@\", \"center\", \"Centered Text\"],\r\n    [\"__\", \"sup\", \"Superscript\"],\r\n    [\"^^\", \"sub\", \"Subscript\"],\r\n]\r\n\r\nexport const just_repl = [\r\n    [\"\\n\\n\",     \"<p></p><br>\\n\\n\"],\r\n    [\"\\r\\n\\r\\n\", \"<p></p><br>\\r\\n\"],\r\n    [\"  \", \"&nbsp;\"],\r\n]\r\n\r\n\r\nexport function m(str, times) {\r\n    let string = \"\";\r\n    for (let i=0; i < times; i++) {\r\n        string += str;\r\n    }\r\n    return string;\r\n}\r\n  \r\n\r\n\r\nexport function fnd(str, pttr, tag) {\r\n    let closing = false;\r\n    while (str.indexOf(pttr) != -1) {\r\n        str = str.replace(pttr, `<${closing ? \"/\" : \"\"}${tag}>`);\r\n        closing = !closing;\r\n    }\r\n    return str;\r\n}\r\n\r\nfunction _remove(string, from, to) { // not including to\r\n    return string.substring(0, from) + string.substring(to);\r\n  }\r\n  \r\n\r\nexport function findLink(str)\r\n{\r\n    let i = str.indexOf(\"[\");\r\n\r\n    // [ NOT found\r\n    if (i == -1) \r\n        return str; \r\n        \r\n    let restSTR = str.slice(i + 1, str.length); // string after [\r\n    let end_index = restSTR.indexOf(\"](\");\r\n\r\n\r\n    // ]( NOT found\r\n    if (end_index == -1) \r\n        return str;\r\n    \r\n    let n_index = restSTR.indexOf(\"\\n\");\r\n    \r\n    // see if [ and ]( are in the same line\r\n    if ( (n_index < end_index) && (n_index !== -1) ) \r\n    {\r\n        console.log(\"[FIRST] not in same line\", i, end_index)\r\n        // split \"[\" and the rest of the string\r\n        let str1 = str.slice(0,    i + 1); \r\n        let str2 = _remove(str, 0, i + 1);\r\n        console.log([str1, str2])\r\n        return [str1, str2];\r\n    }\r\n\r\n    \r\n    let restRest = restSTR.slice(end_index + 2, restSTR.length); // string after ](\r\n\r\n    let j = restRest.indexOf(\")\");\r\n\r\n    // ) not found\r\n    if (j == -1) \r\n        return str; // if ) is nowhere to be found there will be no more links\r\n\r\n    n_index = restRest.indexOf(\"\\n\");\r\n    \r\n    // ]( and ) NOT in same line\r\n    if ( (n_index < j) && (n_index !== -1) ) \r\n    {\r\n        // console.log(\"]( and ) NOT in same line\");\r\n        // console.log(\"tzei\", j)\r\n        let str1 = str.slice(0,    i + end_index + 2  + j + 2);\r\n        let str2 = _remove(str, 0, i + end_index + 2  + j + 2);\r\n        return [str1, str2]\r\n    }\r\n    \r\n    let link = restRest.slice(0, j);\r\n    let desc = restSTR.slice(0, end_index);\r\n\r\n    let total_length = (desc.length + 2) + (link.length + 2);\r\n\r\n\r\n    str = _remove(str, i, i + total_length);\r\n\r\n    let str2 = str.substring(0, i);\r\n    let str1 = _remove(str, 0, i);\r\n\r\n    \r\n    \r\n    return [str2 + `<a href=\"${link}\" target=\"_blank\" rel=\"noopener noreferrer\">${desc}</a>`, str1];\r\n};\r\n\r\n\r\nexport function removeAtRange(str, x, y) {\r\n    return str.substring(x, y);\r\n}\r\n  \r\n\r\nfunction removeAtRanges(string, start, end)\r\n{   \r\n    return [string.substring(start, end),  string.substring(end, string.length) ]\r\n}\r\n\r\n\r\nexport function __line_replace(string, symbol, open_tag, close_tag)\r\n{\r\n    let $symbol = `\\n${symbol}`;    \r\n    let str1 = \"\";  // part of string that has been dealth with\r\n    let str0 = string; // rest of string we are dealing with\r\n\r\n    let len = open_tag.length;\r\n\r\n    // TODO: If symbol.length > 1 then bug\r\n    if (str0[0] == symbol)\r\n    {\r\n        str0 = str0.replace(symbol, `${open_tag}`);\r\n        str0 = str0.replace(\"\\n\",   `${close_tag}\\n`);\r\n    }\r\n\r\n\r\n    let i = str0.indexOf($symbol);\r\n\r\n    while (i !== -1)\r\n    {\r\n        str0 = str0.replace($symbol, `\\n${open_tag}`);\r\n\r\n        let _ = removeAtRanges(str0, 0, i  + len);\r\n        \r\n        str1 += _[0];\r\n        str0 = _[1];\r\n\r\n        str0 = str0.replace(\"\\n\", `${close_tag}\\n`);\r\n        \r\n        i = str0.indexOf($symbol);\r\n    };\r\n\r\n    str1 += str0\r\n\r\n    return str1;\r\n}\r\n\r\n\r\nexport function findInside(str, match) {\r\n    let i = str.indexOf(match); str = str.replace(match, ' ');\r\n    let j = str.indexOf(match); str = str.replace(match, ' ');\r\n    return [i, j == -1 ? str.length : j, str];\r\n}\r\n\r\n  ","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\components\\renderMain.js",["89","90"],"import katex from \"katex\";\r\nimport convertFraction, { insert_at, splitAtRange } from \"./parsing\";\r\nimport {Latex, line_repl, repl, m, fnd, removeAtRange, __line_replace, findLink, findInside, just_repl} from './replace'\r\n\r\n// convert math string e.g `x/5` to latex `\\frac{x}{5}`\r\nexport function convertLatex(sub_str)\r\n{\r\n  Latex.forEach(symbol => {\r\n    sub_str = sub_str.replaceAll(symbol[0], symbol[1] + \" \")\r\n  });\r\n  \r\n  try {\r\n    sub_str = convertFraction(sub_str);\r\n  } catch(e) {};\r\n\r\n  return katex.renderToString(sub_str, {throwOnError: false});\r\n};\r\n\r\nexport const convertLinks = (string) => {\r\n  let str1 = \"\"\r\n  let _ = findLink(string);\r\n\r\n\r\n  while ( typeof(_) !== \"string\" )\r\n  {\r\n      str1 += _[0];\r\n      _ = findLink(_[1]);\r\n  }\r\n\r\n  return str1 + _;\r\n}\r\n\r\n\r\nexport function renderMarkdown(val)\r\n  {\r\n    just_repl.forEach(i => {\r\n      \r\n      val = val.replaceAll(i[0], i[1]);\r\n    })\r\n\r\n    line_repl.forEach(i => {\r\n      val = __line_replace(val, i[0], i[1], i[2]);\r\n    })\r\n  \r\n    repl.forEach(i => {\r\n      val = fnd(val, i[0], i[1]);\r\n    })\r\n\r\n    val = convertLinks(val);\r\n  \r\n    return val;\r\n  }\r\n\r\n\r\nexport function findAllMath(str, ptrn=\"$$\", className=\"math\", tag=\"span\") {\r\n  let ind = findInside(str, ptrn); // Find where it starts and ends \r\n  let sub_str;\r\n\r\n  let math_strings = [];\r\n\r\n  while (ind[0] != -1) {\r\n    str= ind[2]; // End\r\n    sub_str = removeAtRange(str, ind[0], ind[1]); // math string\r\n    str = splitAtRange(str, ind[0], ind[1]); // rest of the string\r\n\r\n    math_strings.push(sub_str);\r\n\r\n    let html = `<${tag} class=\"${className}\"></${tag}>`\r\n\r\n\r\n    str = insert_at(str, html, ind[0]);\r\n    ind = findInside(str, ptrn);\r\n  }\r\n\r\n  return [str, math_strings];\r\n}\r\n\r\n// export function addLineNumbers(codeString)\r\n// {\r\n//   return \"<span>\" + codeString.split(\"\\n\").join(\"</span><span>\") + \"</span>\";\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\dialog.js",["91","92","93","94","95"],"import { Dialog, LinearProgress } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\n\r\n\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n\r\nimport { Latex, repl, line_repl } from \"../components/replace\";\r\nimport { convertLatex, convertLinks } from \"../components/renderMain\"\r\n\r\n\r\nimport SimpleTable from './table';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\n\r\n\r\nfunction convertDict(latex_array)\r\n{\r\n    let obj = [];\r\n    obj.push({\"first\": convertLatex(\"(1)/(4πε0)\"), \"second\": \"(1)/(4πε0)\", \"third\": \"Fraction (a)/(b) is converted to \\\\frac{a}{b}\" });\r\n    for (let i=0; i < latex_array.length; i++)\r\n    {\r\n        let dict;\r\n        if (latex_array[i][0] === \"sqrt\")\r\n            dict = ({\"first\": convertLatex(\"sqrt {x + 1}\"), \"second\": \"sqrt {x + 1}\"});\r\n        else if (latex_array[i][1] === \"$1_$2\")\r\n            dict = ({\"first\": convertLatex(\"x0\"), \"second\": \"x0\"})    \r\n        else\r\n            dict = ({\"first\": convertLatex(latex_array[i][1]), \"second\": latex_array[i][0]})\r\n\r\n        dict[\"third\"] = latex_array[i][2];\r\n\r\n        obj.push(dict);\r\n\r\n    }\r\n\r\n    return obj;\r\n}\r\n\r\n\r\nfunction convertDict2(html_array, line_arr, word=\"Math\")\r\n{\r\n    let arr = [ ];\r\n\r\n    let page = \"https://github.com/Greece4ever\";\r\n    let _link = `[${word}](${page})`;\r\n    \r\n    arr.push({first: convertLinks(_link), second: _link, third: \"Link\" })\r\n\r\n    arr.push({first: convertLatex(\"x^2 = -1\"), second: \"$$ x^2 = - 1 $$\", third: \"Use $$ to write math\" })\r\n\r\n    for (let i=0; i < html_array.length; i++)\r\n    {\r\n        let obj = {};\r\n        let tag  = html_array[i][1];\r\n        let mdown = html_array[i][0];\r\n        \r\n        if (!tag === \"pre\")\r\n            obj.first   = `<${tag}>${word}</${tag}>`;\r\n        else\r\n            obj.first   = `<${tag}><span>${word}</span></${tag}>`;\r\n\r\n        obj.second  = `${mdown}${word}${mdown}`;\r\n        obj.third   =  html_array[i][2]\r\n\r\n        arr.push(obj);\r\n    }\r\n\r\n    for (let i=0; i < line_arr.length; i++)\r\n    {\r\n        let obj = {};\r\n\r\n        obj.first  = line_arr[i][1] + word + line_arr[i][2];\r\n        obj.second = line_arr[i][0] + word\r\n        obj.third = line_arr[i][3]\r\n\r\n        arr.push(obj);\r\n    }\r\n    \r\n\r\n    return arr;\r\n}\r\n\r\n\r\n\r\n\r\nconst HelpDialog = (props) => {\r\n\r\n    const [latexTable, setLatexTable] = useState(convertDict(Latex));\r\n    const [htmlTable, setHtmlTable]   = useState(convertDict2(repl, line_repl));\r\n\r\n    return (\r\n        <Dialog onClose={() => props.setOpen(false)} className={\"XAXAXAXA\"}  maxWidth={\"xl\"}  open={props.open}>\r\n\r\n            <DialogTitle style={{background: \"radial-gradient(#acacac, transparent)\"}}>\r\n                <div style={{    display: 'flex',    alignItems: 'center',    flexWrap: 'wrap',}}>\r\n                    <HelpIcon style={{width: \"24x\", height: \"24px\"}} />\r\n                    <span style={{marginLeft: \"5px\"}}>Formatting help</span>\r\n                </div>\r\n            </DialogTitle>\r\n                <DialogContent className={\"PEOSPEOSPEOS\"}>\r\n                <DialogContentText style={{wordWrap: \"break-word\"}}>\r\n                    Below you can find 2 tables\r\n                    <ul> 1. <a href=\"\" onClick={(e) => {\r\n                        e.preventDefault();\r\n                        document.getElementsByClassName(\"PEOSPEOSPEOS\")[0].scrollTop += document.getElementById(\"table0\").getBoundingClientRect().top - 100;\r\n                        } }>Latex</a>: Symbols are replaced only when inside $$ $$, (e.g $$ &gt;= $$ )</ul>\r\n\r\n                    <ul> 2. <a href=\"#\" onClick={e => {\r\n                        e.preventDefault();\r\n                        document.getElementsByClassName(\"PEOSPEOSPEOS\")[0].scrollTop += document.getElementById(\"table1\").getBoundingClientRect().top - 100;\r\n\r\n                        \r\n                    }}>HTML</a> are replaced everywhere but inside $$ (math) and ``` (code)</ul>\r\n                    \r\n                    You type the symbols in the <b>markdown</b> tab, then they output whatever is in the other tab\r\n\r\n                </DialogContentText>\r\n            \r\n\r\n            <SimpleTable id={\"table0\"} first={\"Latex\"} second={\"Markdown\"} table={latexTable}></SimpleTable>\r\n\r\n            <SimpleTable id={\"table1\"} first={\"HTML\"} second={\"Markdown\"} table={htmlTable}></SimpleTable>\r\n\r\n\r\n            </DialogContent>\r\n\r\n\r\n\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default HelpDialog;","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\table.js",["96"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing.unit * 3,\r\n    overflowX: 'hidden',\r\n  },\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n});\r\n\r\n\r\nfunction SimpleTable(props) {\r\n  const { classes } = props;\r\n\r\n  return (\r\n    <div id={props.id} className={classes.root}>\r\n      <Table className={classes.table}>\r\n        <TableHead style={{background: \"radial-gradient(#dbdbdb, transparent)\"}}>\r\n          <TableRow hover={true}>\r\n            <TableCell>{props.first}</TableCell>\r\n            <TableCell>{props.second}</TableCell>\r\n            <TableCell>Description</TableCell>\r\n\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n\r\n          {props.table.map(n => {\r\n            return (\r\n              <TableRow hover={true}   key={n.id}>\r\n                <TableCell dangerouslySetInnerHTML={{__html: n.first}} component=\"th\" scope=\"row\">\r\n                  {/* {n.first} */}\r\n                </TableCell>\r\n                <TableCell style={{\"fontFamily\": \"math\"}}><code>{n.second}</code></TableCell>\r\n                <TableCell style={{\"fontFamily\": \"math\"}}> <blockquote>{n.third}</blockquote> </TableCell>\r\n\r\n              </TableRow>\r\n            );\r\n          })}\r\n\r\n\r\n\r\n\r\n        </TableBody>\r\n      </Table>\r\n     </div>\r\n  );\r\n}\r\n\r\nSimpleTable.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SimpleTable);\r\n","C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\save.js",[],"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\icons.js",["97","98","99","100","101","102","103"],"C:\\Users\\progr\\Desktop\\win11\\editor\\src\\elementComponents\\dialog2.js",["104","105","106"],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":8,"column":8,"nodeType":"113","messageId":"114","endLine":8,"endColumn":19},{"ruleId":"111","severity":1,"message":"115","line":14,"column":8,"nodeType":"113","messageId":"114","endLine":14,"endColumn":11},{"ruleId":"111","severity":1,"message":"116","line":17,"column":8,"nodeType":"113","messageId":"114","endLine":17,"endColumn":24},{"ruleId":"111","severity":1,"message":"117","line":31,"column":8,"nodeType":"113","messageId":"114","endLine":31,"endColumn":17},{"ruleId":"111","severity":1,"message":"118","line":32,"column":8,"nodeType":"113","messageId":"114","endLine":32,"endColumn":16},{"ruleId":"111","severity":1,"message":"119","line":42,"column":13,"nodeType":"113","messageId":"114","endLine":42,"endColumn":27},{"ruleId":"111","severity":1,"message":"120","line":43,"column":14,"nodeType":"113","messageId":"114","endLine":43,"endColumn":29},{"ruleId":"111","severity":1,"message":"121","line":44,"column":11,"nodeType":"113","messageId":"114","endLine":44,"endColumn":34},{"ruleId":"111","severity":1,"message":"122","line":45,"column":25,"nodeType":"113","messageId":"114","endLine":45,"endColumn":35},{"ruleId":"111","severity":1,"message":"123","line":46,"column":16,"nodeType":"113","messageId":"114","endLine":46,"endColumn":35},{"ruleId":"124","severity":1,"message":"125","line":96,"column":67,"nodeType":"126","messageId":"127","endLine":96,"endColumn":69},{"ruleId":"111","severity":1,"message":"128","line":214,"column":9,"nodeType":"113","messageId":"114","endLine":214,"endColumn":16},{"ruleId":"111","severity":1,"message":"129","line":222,"column":9,"nodeType":"113","messageId":"114","endLine":222,"endColumn":16},{"ruleId":"111","severity":1,"message":"130","line":231,"column":10,"nodeType":"113","messageId":"114","endLine":231,"endColumn":18},{"ruleId":"111","severity":1,"message":"131","line":231,"column":20,"nodeType":"113","messageId":"114","endLine":231,"endColumn":31},{"ruleId":"124","severity":1,"message":"125","line":23,"column":25,"nodeType":"126","messageId":"127","endLine":23,"endColumn":27},{"ruleId":"124","severity":1,"message":"125","line":43,"column":25,"nodeType":"126","messageId":"127","endLine":43,"endColumn":27},{"ruleId":"124","severity":1,"message":"125","line":88,"column":23,"nodeType":"126","messageId":"127","endLine":88,"endColumn":25},{"ruleId":"124","severity":1,"message":"125","line":105,"column":13,"nodeType":"126","messageId":"127","endLine":105,"endColumn":15},{"ruleId":"124","severity":1,"message":"132","line":129,"column":16,"nodeType":"126","messageId":"127","endLine":129,"endColumn":18},{"ruleId":"111","severity":1,"message":"133","line":1,"column":8,"nodeType":"113","messageId":"114","endLine":1,"endColumn":13},{"ruleId":"134","severity":1,"message":"135","line":34,"column":3,"nodeType":"113","endLine":34,"endColumn":12,"suggestions":"136"},{"ruleId":"111","severity":1,"message":"137","line":1,"column":10,"nodeType":"113","messageId":"114","endLine":1,"endColumn":19},{"ruleId":"138","severity":1,"message":"139","line":11,"column":6,"nodeType":"140","messageId":"127","endLine":11,"endColumn":36},{"ruleId":"124","severity":1,"message":"132","line":54,"column":30,"nodeType":"126","messageId":"127","endLine":54,"endColumn":32},{"ruleId":"124","severity":1,"message":"125","line":71,"column":11,"nodeType":"126","messageId":"127","endLine":71,"endColumn":13},{"ruleId":"124","severity":1,"message":"125","line":79,"column":19,"nodeType":"126","messageId":"127","endLine":79,"endColumn":21},{"ruleId":"124","severity":1,"message":"125","line":101,"column":11,"nodeType":"126","messageId":"127","endLine":101,"endColumn":13},{"ruleId":"124","severity":1,"message":"125","line":153,"column":17,"nodeType":"126","messageId":"127","endLine":153,"endColumn":19},{"ruleId":"124","severity":1,"message":"125","line":185,"column":18,"nodeType":"126","messageId":"127","endLine":185,"endColumn":20},{"ruleId":"111","severity":1,"message":"141","line":3,"column":33,"nodeType":"113","messageId":"114","endLine":3,"endColumn":34},{"ruleId":"124","severity":1,"message":"132","line":61,"column":17,"nodeType":"126","messageId":"127","endLine":61,"endColumn":19},{"ruleId":"111","severity":1,"message":"142","line":1,"column":18,"nodeType":"113","messageId":"114","endLine":1,"endColumn":32},{"ruleId":"111","severity":1,"message":"143","line":90,"column":24,"nodeType":"113","messageId":"114","endLine":90,"endColumn":37},{"ruleId":"111","severity":1,"message":"144","line":91,"column":23,"nodeType":"113","messageId":"114","endLine":91,"endColumn":35},{"ruleId":"145","severity":1,"message":"146","line":105,"column":29,"nodeType":"147","endLine":108,"endColumn":29},{"ruleId":"145","severity":1,"message":"146","line":110,"column":29,"nodeType":"147","endLine":115,"endColumn":24},{"ruleId":"111","severity":1,"message":"148","line":9,"column":8,"nodeType":"113","messageId":"114","endLine":9,"endColumn":13},{"ruleId":"111","severity":1,"message":"149","line":1,"column":17,"nodeType":"113","messageId":"114","endLine":1,"endColumn":25},{"ruleId":"111","severity":1,"message":"116","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":24},{"ruleId":"111","severity":1,"message":"117","line":6,"column":8,"nodeType":"113","messageId":"114","endLine":6,"endColumn":17},{"ruleId":"111","severity":1,"message":"150","line":17,"column":8,"nodeType":"113","messageId":"114","endLine":17,"endColumn":20},{"ruleId":"151","severity":1,"message":"152","line":49,"column":21,"nodeType":"147","endLine":49,"endColumn":61},{"ruleId":"151","severity":1,"message":"152","line":52,"column":17,"nodeType":"147","endLine":52,"endColumn":60},{"ruleId":"151","severity":1,"message":"152","line":55,"column":21,"nodeType":"147","endLine":55,"endColumn":64},{"ruleId":"111","severity":1,"message":"153","line":2,"column":8,"nodeType":"113","messageId":"114","endLine":2,"endColumn":17},{"ruleId":"111","severity":1,"message":"154","line":4,"column":8,"nodeType":"113","messageId":"114","endLine":4,"endColumn":14},{"ruleId":"111","severity":1,"message":"155","line":14,"column":8,"nodeType":"113","messageId":"114","endLine":14,"endColumn":18},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-unused-vars","'html2canvas' is defined but never used.","Identifier","unusedVar","'Fab' is defined but never used.","'PictureAsPdfIcon' is defined but never used.","'ImageIcon' is defined but never used.","'HelpIcon' is defined but never used.","'enableDarkMode' is defined but never used.","'disableDarkMode' is defined but never used.","'followSystemColorScheme' is defined but never used.","'collectCSS' is defined but never used.","'isDarkReaderEnabled' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'savePDF' is assigned a value but never used.","'savePNG' is assigned a value but never used.","'saveOpen' is assigned a value but never used.","'setSaveOpen' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fn'. Either include it or remove the dependency array.",["158"],"'insert_at' is defined but never used.","no-control-regex","Unexpected control character(s) in regular expression: \\x00.","Literal","'m' is defined but never used.","'LinearProgress' is defined but never used.","'setLatexTable' is assigned a value but never used.","'setHtmlTable' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Paper' is defined but never used.","'useState' is defined but never used.","'SimpleDialog' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'PropTypes' is defined but never used.","'Button' is defined but never used.","'Typography' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},"Update the dependencies array to be: [fn]",{"range":"161","text":"162"},[807,819],"[fn]"]